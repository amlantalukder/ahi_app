[{"/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/index.js":"1","/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/reportWebVitals.js":"2","/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/App.js":"3"},{"size":535,"mtime":1700149196033,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1700149196035,"results":"6","hashOfConfig":"5"},{"size":5098,"mtime":1700420097506,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hn85s",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/index.js",[],[],"/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/reportWebVitals.js",[],[],"/ddn/gs1/home/talukdera2/projects/ahi_app/client/src/App.js",["18","19"],[],"import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState({ sex: \"\", age: \"\", weight: \"\", height: \"\", initialo2: \"\", initialhr: \"\", initialrr: \"\" });\n  const [ahi_level, setAHILevel] = useState(-1);\n  const [status_text, setStatus] = useState(\"\");\n  const [styles, setStyles] = useState({ results: \"none\" });\n  const predictors = [\n    [\"sex\", \"Sex\", 0, 1],\n    [\"age\", \"Age (Years)\", 0, 120],\n    [\"weight\", \"Weight (kg)\", 4, 300],\n    [\"height\", \"Height (cm)\", 50, 300],\n    [\"initialo2\", \"O2 (%)\", 90, 100],\n    [\"initialhr\", \"Heart Rate (bpm)\", 40, 150],\n    [\"initialrr\", \"Respiratory Rate (bpm)\", 5, 50],\n  ];\n\n  const validate = () => {\n    for (let i in predictors) {\n      let [name, , min, max] = predictors[i];\n      let value = data[name];\n      if ((name === \"sex\" && value !== \"M\" && value !== \"F\") || parseFloat(value) < min || parseFloat(value) > max) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const onChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n    setData({ ...data, [name]: value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!validate()) return;\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    };\n    console.log(\"Fetching...\");\n\n    setStatus(\"Fetching data from server...\");\n\n    fetch(\"/api/\", requestOptions)\n      .then((response) => {\n        console.log(response);\n        if (response.ok) return response.json();\n        throw new Error(\"Server Busy\");\n      })\n      .then((d) => {\n        setAHILevel(d.ahi_level);\n        setStatus(\"\");\n        showResults();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const showResults = () => {\n    setStyles({ results: \"block\" });\n  };\n\n  const hideResults = () => {\n    setStyles({ results: \"none\" });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"bg-image\"></div>\n      <div id=\"app\" className=\"container\">\n        <form onSubmit={onSubmit} method=\"post\">\n          <div className=\"predictors\">\n            {predictors.map(([c, v, min, max]) => {\n              return (\n                <div className=\"predictor\">\n                  <label>{v}:</label>\n                  {c === \"sex\" ? (\n                    <div className=\"sex\">\n                      <div>\n                        <input type=\"radio\" id={`${c}_male`} name={c} value=\"M\" checked={data[c] === \"M\"} onChange={onChange}></input>\n                        <label htmlFor={`${c}_male`}>Male</label>\n                      </div>\n                      <div>\n                        <input type=\"radio\" id={`${c}_female`} name={c} value=\"F\" checked={data[c] === \"F\"} onChange={onChange}></input>\n                        <label htmlFor={`${c}_female`}>Female</label>\n                      </div>\n                    </div>\n                  ) : (\n                    <input type=\"number\" name={c} placeholder={`${min}-${max}`} value={data[c]} onChange={onChange} min={min} max={max} />\n                  )}\n                </div>\n              );\n            })}\n            <div className=\"submit-btn\">\n              <input type=\"submit\" value=\"Predict OSA\" />\n            </div>\n          </div>\n        </form>\n        {status_text ? <div className=\"error\">{status_text}</div> : \"\"}\n      </div>\n      <div id=\"results\" className=\"results\" style={{ display: styles[\"results\"] }}>\n        <div className=\"heading\">\n          <strong>OSA Prediction</strong>\n          <a href=\"#\" className=\"close\" onClick={hideResults} />\n        </div>\n        {ahi_level > 0 && (\n          <div className=\"predictions\">\n            <p>\n              You are predicted to have a <strong>{ahi_level > 0.5 ? \"higher\" : \"Lower\"}</strong> risk for moderate to severe sleep apnea\n            </p>\n            <div className=\"disclaimer\">\n              <p>\n                <strong>Disclaimer and terms to use:</strong>\n              </p>\n              <p>\n                This model predicts that you are <strong>{ahi_level > 0.5 ? \"\" : \"not \"}</strong>at higher risk for obstructive sleep apnea.\n              </p>\n              <p>\n                A user must agree that this is a prediction, not a clinical diagnosis. Only your health care provider can diagnose you whether you have obstructive sleep apnea or\n                not.\n              </p>\n              <p>You may discuss with your health care provider about this prediction result. You and your health care provider can choose to ignore this result.</p>\n              <p>\n                The tool has an average accuracy of 71.8% predicting if a person has a moderate to severe sleep apnea (AHI &gt; 15) and an average accuracy of 63.2% if a person\n                does not have a moderate to severe sleep apnea (AHI &le; 15). Neither accuracy is 100%. Many other factors such as comorbidities are not included in the model.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":111,"column":11,"nodeType":"22","endLine":111,"endColumn":65},{"ruleId":"23","severity":1,"message":"24","line":111,"column":11,"nodeType":"22","endLine":111,"endColumn":65},"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]